https://minikube.sigs.k8s.io/docs/start/
install minikube
minikube start
kubectl get po -A
minikube dashboard

#deploy applications
kubectl create deployment hello-minikube --image=k8s.gcr.io/echoserver:1.4
kubectl expose deployment hello-minikube --type=NodePort --port=8080

kubectl get services hello-minikube
#start service
minikube service hello-minikube
kubectl port-forward service/hello-minikube 7080:8080
http://localhost:7080/
#load balancer deploy applications
kubectl create deployment balanced --image=k8s.gcr.io/echoserver:1.4
kubectl expose deployment balanced --type=LoadBalancer --port=8080

minikube tunnel
kubectl get services balanced

kubectl get deployments
kubectl get pods
kubectl config view

kubectl cluster-info
kubectl get nodes

install docker on MacOS
https://www.cprime.com/resources/blog/docker-on-mac-with-homebrew-a-step-by-step-tutorial/
brew install --cask docker
#start docker on apps panel
1.First, clone a repository
The Getting Started project is a simple GitHub repository which contains everything you need to build an image and run it as a container.
Clone the repository by running Git in a container.

docker run --name repo alpine/git clone https://github.com/docker/getting-started.git
docker cp repo:/git/getting-started/ .

cd getting-started
docker build -t docker101tutorial .

docker run -d -p 80:80 --name docker-tutorial docker101tutorial

#register and login a docker hub
https://docs.docker.com/get-started/?utm_campaign=2021-09-16-mailgun-email-verified&utm_medium=email&utm_source=mailgun
https://hub.docker.com/repository/docker/liujiage/docker-hub
Docker hub
liujiage/yangyang

#push a images to hub
docker tag docker101tutorial liujiage/docker-hub:docker101tutorial
docker push liujiage/docker-hub:docker101tutorial
liujiages-MacBook-Pro:getting-started liujiage$ docker push liujiage/docker-hub:docker101tutorial
The push refers to repository [docker.io/liujiage/docker-hub]

docker pull liujiage/docker-hub:docker101tutorial
https://docs.docker.com/get-started/orchestration/


#remove images and container
docker rm <container id>
docker rmi <images id>

#docker create a network
docker network ls
docker network create --subnet=172.20.0.0/24 docker-br0
#mac route config
netstat -nr
sudo route -n add -net 172.20.0.0 -netmask 255.255.255.0 192.168.1.86
*mac has no virtual network, so the host can not visitor docker ip


